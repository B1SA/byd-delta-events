AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  byd-delta-events

  Template for byd-delta-events
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Resources:
  #Function Gets ByD Delta
  GetBydObjectsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: get-byd-objects/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserSessionTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EventConfigTable
        - SNSPublishMessagePolicy:
            TopicName: "*"
      Environment:
        Variables:
          #CHANGE to real system details
          #ByD Details
          BYD_ODATA: "https://my000000.sapbydesign.com/sap/byd/odata/cust/v1"
          BYD_AUTH: "user:password base64 encoded"
          BYD_INVOICES: "/khcustomerinvoice/CustomerInvoiceCollection"
          BYD_INVOICES_ID: "ID"
          BYD_CUSTOMERS: "/khcustomer/CustomerCollection"
          BYD_CUSTOMERS_ID: "InternalID"
          BYD_SALESORDERS: "/khsalesorder/SalesOrderCollection"
          BYD_SALESORDERS_ID: "ID"
          BYD_SERVICESORDERS: "/tmserviceorder/ServiceOrderCollection"
          BYD_SERVICEORDERS_ID: "ID"
          
          #AWS Details
          CONFIG_TABLE: !Ref EventConfigTable
          CONFIG_ID: 0
          SNS_TOPIC: !Ref BydEventTopic
  #Function Tweet an Event
  TweetByDEvent:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: tweet-byd-event/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          #TWITTER KEYS - Get yours on https://developer.twitter.com/apps
          TWITER_API_KEY: "API KEY"
          TWITTER_SECRET_KEY: "API SECRET"
          TWITTER_ACCESS_TOKEN: "ACCESS TOKEN"
          TWITTER_TOKEN_SECRET: "TOKEN SECRET"
  #Function Send event to SCP
  PublishEventSCP:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: publish-event-scp/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          #SCP Authentication Details
          SCP_EM_URL: "https://<SUB ACCOUNT>.authentication.eu10.hana.ondemand.com"
          SCP_EM_AUTH_ENDPOINT: "/oauth/token"
          #Enconde client_id:client_secret of SCP Enterprise Messaging
          SCP_EM_AUTHORIZATION: "IT WILL BE A VERY LONG STRING"
          SCP_EM_PUB_URL: "https://enterprise-messaging-pubsub.cfapps.eu10.hana.ondemand.com"
          SCP_EM_PUB_ENDPOINT: "ENDPOINT FOR SCP PUBSUB"

  #SNS Topic to handle Lambda Calls
  BydEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'byd-event-topic'
      TopicName:  'byd-event'
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt TweetByDEvent.Arn
        - Protocol: lambda
          Endpoint: !GetAtt PublishEventSCP.Arn
  
  TweetByDEventInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TweetByDEvent
      Principal: sns.amazonaws.com   
  
  PublishEventSCPInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref PublishEventSCP
      Principal: sns.amazonaws.com   

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  EventConfigTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: EventConfigTable
      PrimaryKey:
        Name: configId
        Type: Number
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  #Cloud Watch Event to Trigger function on timer
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Invoke Byd Delta function"
      Name: "trigger-byd-delta"
      State: "ENABLED"
      ScheduleExpression: "rate(1 minute)"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "GetBydObjectsFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref GetBydObjectsFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt "ScheduledRule.Arn"
Outputs:
  GetBydObjectsFunction:
    Description: "Get ByD Objects Function ARN"
    Value: !GetAtt GetBydObjectsFunction.Arn
  GetBydObjectsFunctionIamRole:
    Description: "Get ByD Objects Function"
    Value: !GetAtt GetBydObjectsFunctionRole.Arn

