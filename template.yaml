AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  byd-delta-events

  Sample SAM Template for byd-delta-events
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Resources:
  #Gets ByD Delta
  GetBydObjectsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: get-byd-objects/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserSessionTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EventConfigTable
        - SNSPublishMessagePolicy:
            TopicName: "*"
      Events:
        GetBydObject:
          Type: Api 
          Properties:
            Path: /bydObject
            Method: get
      Environment:
        Variables:
          #CHANGE to real system details
          #ByD Details
          BYD_ODATA: "https://my343094.sapbydesign.com/sap/byd/odata/cust/v1"
          BYD_AUTH: "QWRtaW5pc3RyYXRpb24wMTpXZWxjb21lMTAx"
          BYD_INVOICES: "/khcustomerinvoice/CustomerInvoiceCollection"
          BYD_INVOICES_ID: "ID"
          BYD_CUSTOMERS: "/khcustomer/CustomerCollection"
          BYD_CUSTOMERS_ID: "InternalID"
          
          #AWS Details
          CONFIG_TABLE: !Ref EventConfigTable
          CONFIG_ID: 0
          SNS_TOPIC: !Ref BydEventTopic
  #Tweet an Event
  TweetByDEvent:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: tweet-byd-event/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
  
  #Send event to SCP
  PublishEventSCP:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: publish-event-scp/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x

  #SNS Topic to handle Lambda Calls
  BydEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'byd-event-topic'
      TopicName:  'byd-event'
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt TweetByDEvent.Arn
        - Protocol: lambda
          Endpoint: !GetAtt PublishEventSCP.Arn

  TweetByDEventInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TweetByDEvent
      Principal: sns.amazonaws.com   
  
  PublishEventSCPInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref PublishEventSCP
      Principal: sns.amazonaws.com   

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  EventConfigTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: EventConfigTable
      PrimaryKey:
        Name: configId
        Type: Number
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetBydObjectsdApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/bydObject/"
  GetBydObjectsFunction:
    Description: "Get ByD Objects Function ARN"
    Value: !GetAtt GetBydObjectsFunction.Arn
  GetBydObjectsFunctionIamRole:
    Description: "Get ByD Objects Function"
    Value: !GetAtt GetBydObjectsFunctionRole.Arn

